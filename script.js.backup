// Tamil Names Database
let namesDatabase = [
    {
        id: 1,
        name: "அருண்",
        meaning: "சூரியன், செம்மையான",
        reference: "சூரிய வழிபாட்டில் பயன்படும் புனித பெயர்",
        gender: "ஆண்கள்",
        category: "தூய தமிழ்",
        votes: 28,
        contributor: "ராமேஷ்",
        status: "approved",
        approved: true
    },
    {
        id: 2,
        name: "கவிதா",
        meaning: "கவிதை, இலக்கியம்",
        reference: "இலக்கிய உலகின் அழகை குறிக்கும் பெயர்",
        gender: "பெண்கள்",
        category: "நவீன",
        votes: 15,
        contributor: "பிரியா",
        status: "pending",
        approved: false
    },
    {
        id: 3,
        name: "தமிழினன்",
        meaning: "தமிழை நேசிப்பவன்",
        reference: "தமிழ் கலாச்சாரத்தில் வேரூன்றிய பெயர்",
        gender: "ஆண்கள்",
        category: "தூய தமிழ்",
        votes: 42,
        contributor: "முருகன்",
        status: "admin",
        approved: true
    },
    {
        id: 4,
        name: "இனியா",
        meaning: "இனிமையானவள்",
        reference: "மதுர குணத்தை குறிக்கும் அழகான பெயர்",
        gender: "பெண்கள்",
        category: "தனித்துவமான",
        votes: 33,
        contributor: "சுனிதா",
        status: "approved",
        approved: true
    },
    {
        id: 5,
        name: "வேலன்",
        meaning: "முருகப் பெருமானின் மற்றொரு பெயர்",
        reference: "திருமுருகன் வழிபாட்டில் சிறப்பிடம் பெற்ற பெயர்",
        gender: "ஆண்கள்",
        category: "தூய தமிழ்",
        votes: 25,
        contributor: "கார்த்திக்",
        status: "approved",
        approved: true
    },
    {
        id: 6,
        name: "நிலா",
        meaning: "சந்திரன்",
        reference: "இயற்கையின் அழகை குறிக்கும் பெயர்",
        gender: "பெண்கள்",
        category: "இயற்கை",
        votes: 19,
        contributor: "லதா",
        status: "pending",
        approved: false
    },
    {
        id: 7,
        name: "ஆதவன்",
        meaning: "சூரியன்",
        reference: "ஒளி மற்றும் சக்தியின் அடையாளம்",
        gender: "ஆண்கள்",
        category: "இயற்கை",
        votes: 31,
        contributor: "சுரேஷ்",
        status: "approved",
        approved: true
    },
    {
        id: 8,
        name: "மல்லிகா",
        meaning: "மல்லிகை மலர்",
        reference: "தமிழ் கவிதைகளில் அடிக்கடி வரும் பூ",
        gender: "பெண்கள்",
        category: "இயற்கை",
        votes: 27,
        contributor: "கவிதா",
        status: "approved",
        approved: true
    }
];

// Contributors Database
let contributors = [
    { name: "ராமேஷ்", contributions: 5 },
    { name: "பிரியா", contributions: 3 },
    { name: "முருகன்", contributions: 8 },
    { name: "சுனிதா", contributions: 2 },
    { name: "கார்த்திக்", contributions: 4 }
];

// User favorites (stored in localStorage)
let userFavorites = JSON.parse(localStorage.getItem('tamilNamesFavorites')) || [];
let userVotes = JSON.parse(localStorage.getItem('tamilNamesVotes')) || [];

// DOM Elements
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    updateStats();
    loadFeaturedNames();
    setupEventListeners();
    
    // Initialize page-specific content
    const currentPage = getCurrentPage();
    switch(currentPage) {
        case 'names.html':
            loadAllNames();
            setupFilters();
            break;
        case 'submit.html':
            setupSubmitForm();
            break;
        case 'favorites.html':
            loadFavoriteNames();
            break;
        case 'admin.html':
            loadAdminPanel();
            break;
    }
}

function getCurrentPage() {
    return window.location.pathname.split('/').pop() || 'index.html';
}

function setupEventListeners() {
    // Mobile menu toggle
    const mobileMenu = document.getElementById('mobile-menu');
    const navMenu = document.querySelector('.nav-menu');
    
    if (mobileMenu) {
        mobileMenu.addEventListener('click', () => {
            navMenu.classList.toggle('active');
        });
    }

    // Close modal events
    const modal = document.getElementById('randomNameModal');
    const closeBtn = document.querySelector('.close');
    
    if (modal && closeBtn) {
        closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });
        
        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    }
}

function updateStats() {
    const totalNamesEl = document.getElementById('totalNames');
    const approvedNamesEl = document.getElementById('approvedNames');
    const contributorsEl = document.getElementById('contributors');
    
    if (totalNamesEl) {
        totalNamesEl.textContent = namesDatabase.length;
    }
    
    if (approvedNamesEl) {
        const approvedCount = namesDatabase.filter(name => name.approved).length;
        approvedNamesEl.textContent = approvedCount;
    }
    
    if (contributorsEl) {
        contributorsEl.textContent = contributors.length;
    }
}

function loadFeaturedNames() {
    const featuredContainer = document.getElementById('featuredNames');
    if (!featuredContainer) return;
    
    // Get top 3 most voted names
    const featuredNames = namesDatabase
        .sort((a, b) => b.votes - a.votes)
        .slice(0, 3);
    
    featuredContainer.innerHTML = featuredNames.map(name => createNameCard(name)).join('');
}

function createNameCard(name) {
    const isFavorited = userFavorites.includes(name.id);
    const hasVoted = userVotes.includes(name.id);
    
    let statusBadge = '';
    switch(name.status) {
        case 'admin':
            statusBadge = '<span class="badge badge-admin">நிர்வாக ஒப்புதல்</span>';
            break;
        case 'approved':
            statusBadge = '<span class="badge badge-approved">சமுதாய ஒப்புதல்</span>';
            break;
        default:
            statusBadge = '<span class="badge badge-pending">பரிசீலனையில்</span>';
    }
    
    const genderBadge = name.gender === 'ஆண்கள்' 
        ? '<span class="badge badge-male">ஆண்கள்</span>'
        : '<span class="badge badge-female">பெண்கள்</span>';
    
    return `
        <div class="name-card" data-id="${name.id}">
            <div class="name-header">
                <div>
                    <h3 class="name-title">${name.name}</h3>
                    <p class="name-meaning">${name.meaning}</p>
                </div>
                <button class="favorite-btn ${isFavorited ? 'favorited' : ''}" 
                        onclick="toggleFavorite(${name.id})"
                        title="${isFavorited ? 'விருப்பப்பட்டியலிலிருந்து அகற்று' : 'விருப்பப்பட்டியலில் சேர்'}">
                    ${isFavorited ? '♥' : '♡'}
                </button>
            </div>
            
            ${name.reference ? `<p class="name-reference">"${name.reference}"</p>` : ''}
            
            <div class="name-footer">
                <div class="name-badges">
                    ${statusBadge}
                    ${genderBadge}
                </div>
                
                <div class="name-actions">
                    <button class="vote-btn ${hasVoted ? 'voted' : ''}" 
                            onclick="voteForName(${name.id})"
                            ${hasVoted ? 'disabled' : ''}>
                        ${name.votes} வாக்குகள்
                    </button>
                </div>
            </div>
            
            ${name.contributor ? `
                <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #eee; font-size: 0.9rem; color: #666;">
                    இந்த பெயர் ${name.contributor} அவர்களால் பகிரப்பட்டது
                </div>
            ` : ''}
        </div>
    `;
}

function toggleFavorite(nameId) {
    const index = userFavorites.indexOf(nameId);
    
    if (index > -1) {
        userFavorites.splice(index, 1);
    } else {
        userFavorites.push(nameId);
    }
    
    localStorage.setItem('tamilNamesFavorites', JSON.stringify(userFavorites));
    
    // Update UI
    const favoriteBtn = document.querySelector(`[data-id="${nameId}"] .favorite-btn`);
    if (favoriteBtn) {
        favoriteBtn.classList.toggle('favorited');
    }
    
    // If we're on favorites page, reload
    if (getCurrentPage() === 'favorites.html') {
        loadFavoriteNames();
    }
}

function voteForName(nameId) {
    if (userVotes.includes(nameId)) return;
    
    // Add vote
    userVotes.push(nameId);
    localStorage.setItem('tamilNamesVotes', JSON.stringify(userVotes));
    
    // Update database
    const name = namesDatabase.find(n => n.id === nameId);
    if (name) {
        name.votes++;
        
        // Check if name should be auto-approved
        if (name.votes >= 25 && name.status === 'pending') {
            name.status = 'approved';
            name.approved = true;
        }
    }
    
    // Update UI
    const voteBtn = document.querySelector(`[data-id="${nameId}"] .vote-btn`);
    if (voteBtn) {
        voteBtn.classList.add('voted');
        voteBtn.disabled = true;
        voteBtn.innerHTML = `${name.votes} வாக்குகள்`;
    }
    
    updateStats();
}

function showRandomName() {
    const randomName = namesDatabase[Math.floor(Math.random() * namesDatabase.length)];
    const modal = document.getElementById('randomNameModal');
    const content = document.getElementById('randomNameContent');
    
    if (modal && content) {
        content.innerHTML = `
            <div style="text-align: center; padding: 2rem;">
                <h2 style="color: #d32f2f; font-size: 2.5rem; margin-bottom: 1rem;">${randomName.name}</h2>
                <p style="font-size: 1.3rem; color: #666; margin-bottom: 1rem;">${randomName.meaning}</p>
                ${randomName.reference ? `<p style="font-style: italic; color: #888; margin-bottom: 2rem;">"${randomName.reference}"</p>` : ''}
                <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
                    <span class="badge badge-${randomName.gender === 'ஆண்கள்' ? 'male' : 'female'}">
                        ${randomName.gender === 'ஆண்கள்' ? '👦' : '👧'} ${randomName.gender}
                    </span>
                    <span class="badge badge-approved">${randomName.category}</span>
                </div>
                <div style="margin-top: 2rem;">
                    <button class="btn btn-primary" onclick="goToName(${randomName.id})">
                        இந்த பெயரை விரிவாக பார்க்க
                    </button>
                </div>
            </div>
        `;
        modal.style.display = 'block';
    }
}

function goToName(nameId) {
    window.location.href = `names.html?highlight=${nameId}`;
}

function filterByCategory(category) {
    window.location.href = `names.html?category=${encodeURIComponent(category)}`;
}

// Names page specific functions
function loadAllNames() {
    const namesContainer = document.getElementById('namesContainer');
    if (!namesContainer) return;
    
    let filteredNames = [...namesDatabase];
    
    // Apply URL filters
    const urlParams = new URLSearchParams(window.location.search);
    const categoryFilter = urlParams.get('category');
    const highlightId = urlParams.get('highlight');
    
    if (categoryFilter) {
        filteredNames = filteredNames.filter(name => 
            name.category === categoryFilter || name.gender === categoryFilter
        );
        
        // Update filter UI
        const categorySelect = document.getElementById('categoryFilter');
        if (categorySelect) {
            categorySelect.value = categoryFilter;
        }
    }
    
    displayNames(filteredNames);
    
    // Highlight specific name if requested
    if (highlightId) {
        setTimeout(() => {
            const nameCard = document.querySelector(`[data-id="${highlightId}"]`);
            if (nameCard) {
                nameCard.scrollIntoView({ behavior: 'smooth' });
                nameCard.style.animation = 'highlight 2s ease-in-out';
            }
        }, 500);
    }
}

function displayNames(names) {
    const container = document.getElementById('namesContainer');
    if (!container) return;
    
    if (names.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 3rem;">
                <h3>பெயர்கள் கிடைக்கவில்லை</h3>
                <p>உங்கள் தேடல் அல்லது வடிகட்டலுக்கு பொருந்தும் பெயர்கள் எதுவும் இல்லை.</p>
                <button class="btn btn-primary" onclick="clearFilters()">அனைத்து பெயர்களையும் பார்க்க</button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = `
        <div class="names-grid">
            ${names.map(name => createNameCard(name)).join('')}
        </div>
    `;
}

function setupFilters() {
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const genderFilter = document.getElementById('genderFilter');
    const letterButtons = document.querySelectorAll('.letter-btn');
    
    if (searchInput) {
        searchInput.addEventListener('input', applyFilters);
    }
    
    if (categoryFilter) {
        categoryFilter.addEventListener('change', applyFilters);
    }
    
    if (genderFilter) {
        genderFilter.addEventListener('change', applyFilters);
    }
    
    letterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            // Toggle active state
            letterButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            applyFilters();
        });
    });
}

function applyFilters() {
    const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
    const categoryFilter = document.getElementById('categoryFilter')?.value || '';
    const genderFilter = document.getElementById('genderFilter')?.value || '';
    const activeLetterBtn = document.querySelector('.letter-btn.active');
    const letterFilter = activeLetterBtn?.textContent || '';
    
    let filteredNames = namesDatabase.filter(name => {
        const matchesSearch = name.name.toLowerCase().includes(searchTerm) || 
                            name.meaning.toLowerCase().includes(searchTerm);
        
        const matchesCategory = !categoryFilter || name.category === categoryFilter;
        const matchesGender = !genderFilter || name.gender === genderFilter;
        const matchesLetter = !letterFilter || name.name.startsWith(letterFilter);
        
        return matchesSearch && matchesCategory && matchesGender && matchesLetter;
    });
    
    displayNames(filteredNames);
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    document.getElementById('genderFilter').value = '';
    document.querySelectorAll('.letter-btn').forEach(btn => btn.classList.remove('active'));
    
    displayNames(namesDatabase);
}

// Submit page functions
function setupSubmitForm() {
    const form = document.getElementById('submitForm');
    if (!form) return;
    
    form.addEventListener('submit', handleSubmit);
}

function handleSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const newName = {
        id: Date.now(), // Simple ID generation
        name: formData.get('name'),
        meaning: formData.get('meaning'),
        reference: formData.get('reference') || '',
        gender: formData.get('gender'),
        category: formData.get('category'),
        votes: 0,
        contributor: formData.get('contributor') || 'அநாமதேய',
        status: 'pending',
        approved: false
    };
    
    // Validate required fields
    if (!newName.name || !newName.meaning || !newName.gender || !newName.category) {
        showMessage('தேவையான அனைத்து புலங்களையும் பூர்த்தி செய்யவும்', 'error');
        return;
    }
    
    // Add to database
    namesDatabase.push(newName);
    
    // Show success message
    showMessage('உங்கள் பெயர் வெற்றிகரமாக சேர்க்கப்பட்டது! சமூகம் இப்போது இதை மதிப்பீடு செய்யலாம்.', 'success');
    
    // Reset form
    event.target.reset();
    
    // Update stats
    updateStats();
}

function showMessage(text, type) {
    const existingMessage = document.querySelector('.message');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    const message = document.createElement('div');
    message.className = `message message-${type}`;
    message.textContent = text;
    
    const form = document.getElementById('submitForm');
    if (form) {
        form.insertBefore(message, form.firstChild);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            message.remove();
        }, 5000);
    }
}

// Favorites page functions
function loadFavoriteNames() {
    const favoritesContainer = document.getElementById('favoritesContainer');
    if (!favoritesContainer) return;
    
    const favoriteNames = namesDatabase.filter(name => userFavorites.includes(name.id));
    
    if (favoriteNames.length === 0) {
        favoritesContainer.innerHTML = `
            <div style="text-align: center; padding: 3rem;">
                <h3>விருப்பமான பெயர்கள் இல்லை</h3>
                <p>நீங்கள் இன்னும் எந்த பெயரையும் விருப்பமானதாக குறிக்கவில்லை.</p>
                <a href="names.html" class="btn btn-primary">பெயர்கள் பார்வையிட</a>
            </div>
        `;
        return;
    }
    
    favoritesContainer.innerHTML = `
        <div class="names-grid">
            ${favoriteNames.map(name => createNameCard(name)).join('')}
        </div>
    `;
}

// Admin panel functions
function loadAdminPanel() {
    const adminContainer = document.getElementById('adminContainer');
    if (!adminContainer) return;
    
    const pendingNames = namesDatabase.filter(name => name.status === 'pending');
    
    adminContainer.innerHTML = `
        <div class="admin-panel">
            <h2>நிர்வாக பேனல்</h2>
            <div class="admin-stats">
                <div class="stat-card">
                    <div class="stat-number">${pendingNames.length}</div>
                    <div class="stat-label">ஒப்புதலுக்காக காத்திருக்கும்</div>
                </div>
            </div>
            
            <div class="pending-names">
                ${pendingNames.map(name => createAdminNameCard(name)).join('')}
            </div>
        </div>
    `;
}

function createAdminNameCard(name) {
    return `
        <div class="admin-name-card" data-id="${name.id}">
            <div class="name-info">
                <h3>${name.name}</h3>
                <p><strong>அர்த்தம்:</strong> ${name.meaning}</p>
                ${name.reference ? `<p><strong>குறிப்பு:</strong> ${name.reference}</p>` : ''}
                <p><strong>பாலினம்:</strong> ${name.gender}</p>
                <p><strong>வகை:</strong> ${name.category}</p>
                <p><strong>பங்களிப்பாளர்:</strong> ${name.contributor}</p>
                <p><strong>வாக்குகள்:</strong> ${name.votes}</p>
            </div>
            <div class="admin-actions">
                <button class="btn btn-primary" onclick="approveNameAsAdmin(${name.id})">
                    ஒப்புதல்
                </button>
                <button class="btn btn-secondary" onclick="editName(${name.id})">
                    திருத்து
                </button>
                <button class="btn btn-outline" onclick="rejectName(${name.id})">
                    நிராகரி
                </button>
            </div>
        </div>
    `;
}

function approveNameAsAdmin(nameId) {
    const name = namesDatabase.find(n => n.id === nameId);
    if (name) {
        name.status = 'admin';
        name.approved = true;
        loadAdminPanel(); // Reload admin panel
        updateStats();
    }
}

function rejectName(nameId) {
    if (confirm('இந்த பெயரை நிராகரிக்க விரும்புகிறீர்களா?')) {
        const index = namesDatabase.findIndex(n => n.id === nameId);
        if (index > -1) {
            namesDatabase.splice(index, 1);
            loadAdminPanel(); // Reload admin panel
            updateStats();
        }
    }
}

// Add CSS for highlight animation
const style = document.createElement('style');
style.textContent = `
    @keyframes highlight {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); box-shadow: 0 10px 30px rgba(211, 47, 47, 0.3); }
    }
    
    .admin-name-card {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 2rem;
    }
    
    .admin-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        min-width: 150px;
    }
    
    .name-info h3 {
        color: #d32f2f;
        margin-bottom: 1rem;
    }
    
    .name-info p {
        margin-bottom: 0.5rem;
        line-height: 1.6;
    }
`;
document.head.appendChild(style);
